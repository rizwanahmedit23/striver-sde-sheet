/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        // APPROACH ONE O(N) O(N)
        // unordered_map<ListNode*, int> map;
        // while(headA != NULL && headB != NULL){
        //     if(headA == headB)   return headA;
        //     if(map.count(headA) > 0 || map.count(headB) > 0){
        //         if(map.count(headA) > 0)    return headA;
        //         else    return headB;
        //     }
        //     map[headA] ++;
        //     map[headB] ++;
        //     headA = headA->next;
        //     headB = headB->next;
        // }
        // while(headB != NULL){
        //     if(map.count(headB) > 0)    return headB;
        //     if(headB == headA)  return headA;
        //     headB = headB -> next;
        // }
        // while(headA != NULL){
        //     if(map.count(headA) > 0)    return headA;
        //     if(headB == headA)  return headA;
        //     headA = headA -> next;
        // }
        // return NULL;
        
        // APPROACH 2 O(N) O(1)
        bool flag;
        if(headA == NULL || headB == NULL)  return NULL;
        ListNode *p1 = headA, *p2 = headB;
        if(headA == headB)  return headA;
        while(headA->next != NULL && headB->next != NULL){
            headA = headA->next;
            headB = headB->next;
        }
        if(headA->next == NULL){
            headA = p2;
            flag = 1;
        }
        else{
            headB = p1;
            flag = 0;
        }
        while(headA->next != NULL && headB->next != NULL){
            headA = headA->next;
            headB = headB->next;
        }
        if(flag == 0 && headA->next == NULL){
            headA = p2;
        }
        else{
            headB = p1;
        }
        while(headA!=NULL && headB != NULL){
            if(headA == headB)  return headA;
            headA = headA->next;
            headB = headB->next;
        }
        return NULL;
    }
};
