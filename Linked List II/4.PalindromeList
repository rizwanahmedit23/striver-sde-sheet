/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
    ListNode* reverseList(ListNode* head) {
        if(head == NULL || head->next == NULL)    return head;
        ListNode* newHead = reverseList(head->next);
        head ->next->next = head;
        head->next = NULL;
        return newHead;
    }
public:
        // O(n^2)
    // bool isPalindrome(ListNode* head, int n) {
    //     if(head == NULL || head->next == NULL){
    //         return true;
    //     }
    //     ListNode * temp = head;
    //     int i = 1;
    //     while(i< n && temp -> next != NULL){
    //         temp = temp -> next;
    //         i++;
    //     }
    //     if(head->val == temp->val)    return isPalindrome(head->next, n-2);
    //     else return false;
    // }
    // bool isPalindrome(ListNode* head) {
        // if(head == NULL || head->next == NULL){
        //     return true;
        // }
        // int n = 1;
        // ListNode * temp = head;
        // while(temp -> next != NULL){
        //     n++;
        //     temp = temp -> next;
        // }
        // return isPalindrome(head, n);
    // O(n)
        if(head == NULL || head->next == NULL){
            return true;
        }
        
        ListNode* slow = head, *fast = head->next;
        
        while(fast!=NULL && fast->next != NULL){
            fast = fast -> next -> next;
            slow = slow -> next;
        }
        slow -> next = reverseList(slow->next);
        slow = slow -> next;
        ListNode* node = head;
        
        while(slow != NULL){
            if(node->val != slow->val){
                return false;
            }
            node = node-> next;
            slow = slow-> next;
        }
        
        return true;
        
    }
};
